#Author Venla Katainen
.pos 0
   irmovq array,%r11     # muistipaikka 0x700
   irmovq $3,%r12        # 3
   rmmovq %r12,(%r11)
   irmovq $5,%r12        # 5
   rmmovq %r12,8(%r11)
   irmovq $8,%r12        # 8
   rmmovq %r12,16(%r11)
   irmovq $0,%r12        # loppunolla
   rmmovq %r12,24(%r11)
   
main:
    irmovq 0x0700,%rsp           #array-osoitin
    irmovq 0x0700,%rbp           #arrayn alkuosoite
onkoFibonacci:
    irmovq $0, %r10             #nollataan rekisteri r10
    irmovq $0, %rdx             #luku 0 rekisteriin rdx
    irmovq $0, %r12             #nollataan r12
    irmovq $0, %r11             #nollataan r11
    irmovq $0, %r13             #nollataan r13
    irmovq $0, %r14             #nollataan r14
    irmovq $0, %rbx             #nollataan rbx
    irmovq $0, %rax             #nollataan rax
    irmovq $0, %rdi             #nollataan rdi
    irmovq $0, %rcx             #nollataan rcx
    irmovq $0, %r8              #nollataan r8
    irmovq $0, %r9              #nollataan r9
    popq %r12                   #paallimainen pinosta reksiteriin r12
    subq %rdx, %r12             #tarkistetaan onko pinosta otettu arvo 0
    je valmis                   #jos on koko jono on tarkistettu
    pushq %r12                  #laitetaan arvo takaisin pinoon muistiin 
    rrmovq %r12, %r11           #siirretaan r12 rekisteriin r11
    call kertolaskualiohj
    rrmovq %rax, %r11           #kertolaskun x*x tulos rekisteriin r11
    irmovq $5, %r12             #5 rekisteriin r12
    call kertolaskualiohj       #lasketaan 5*x*x
    rrmovq %rax, %r10           #siirretaan tulos 5*x*x muistiin rekisteriin r10
    irmovq $4, %rbx             #luku 4 rekisteriin rbx
    addq %rbx, %r10             #lisataan lukuun 5*x*x + 4
                                #uusi x = r10
    jmp onkoTaydellinen
    
onkoTaydellinen:                #isPerfectSquare(5*x*x + 4)
    rrmovq %r10, %r12
    call neliojuuri             #kutsutaan neliojuuri aliohjelmaa
    rrmovq %rcx,%r12            #siirretaan neliojuuren tulos takaisin rekisteriin r12
    rrmovq %rcx,%r11            #siirretaan myos reksiteriin r11
    call kertolaskualiohj       # s*s
    rrmovq %r10, %r9            #siirretaan alkuperainen 5*x*x+4 rekisteriin r9
    subq %rax,%r9               # x - s*s 
    jne eiOllutNolla            #jos ei ole nolla
    je ensimmainenNolla         #jos nolla 

ensimmainenNolla:               #isPerfectSquare(5*x*x - 4)
    irmovq $8, %rbx             #8 rekisteriin rbx
    subq %rbx, %r10             #5*x*x - 8
    rrmovq %r10, %r12           #siirretaan x r12 rekisteriin
    call neliojuuri
    rrmovq %rcx, %r11           #siirretaan tulos r11 rekisteriin
    rrmovq %rcx, %r12           #siirretaan tulos myos r12 rekisteriin
    call kertolaskualiohj
    rrmovq %r10, %r9            #alkuperainen x rekisteriin r9
    subq %rax, %r9    
    je nollaus                  #oli fibonaccin luku
    jne nollaus                 #oli fibonaccin luku
    
eiOllutNolla:                   #isPerfectSquare(5*x*x - 4)
    irmovq $8, %rbx             #8 rekisteriin rbx
    subq %rbx, %r10             #5*x*x - 8
    rrmovq %r10, %r12           #siirretaan x r12 rekisteriin
    call neliojuuri
    rrmovq %rcx, %r11           #siirretaan tulos r11 rekisteriin
    rrmovq %rcx, %r12           #siirretaan tulos myos r12 rekisteriin
    call kertolaskualiohj
    rrmovq %r10, %r9            #alkuperainen x rekisteriin r9
    subq %rax, %r9    
    je nollaus                  #oli fibonaccin luku
    jne eiFibonacci             #ei ollut fibonaccin luku

nollaus:
    popq %r12
    jmp onkoFibonacci
    
    
eiFibonacci:                    #ei ollut fibonaccin luku
    popq %r12                   #luku, jota tarkistettiin
    rrmovq %r12, %rax           #siirretaan rekisteriin rax
    halt                        #lopetus
    
valmis:                         #kaikki lukujonossa olivat fibonaccin lukuja
    irmovq $0, %rax             # 0 rekisteriin rax
    halt                        #lopetus

#kertolasku
.pos 0x400
kertolaskualiohj:
    irmovq $0x0001, %rbx        #luku 1 rekisteriin rbx
    irmovq $0, %rdx             #luku 0 rekisteriin rdx
    irmovq $0, %rax             #tulos
    irmovq $0, %rsi
    irmovq $0, %r13
    
kertolasku:                     #kertolaskun suorittava looppi
    rrmovq %rbx, %rsi           #siirretään rekisterin rbx arvo rekisteriin rsi
    andq %r11, %rsi             #and operaatio kerrottavalle ja rsi (1)
    subq %rdx, %rsi             #vahennetaan rsi = rsi - rdx (0)
    je bittisiirto              #jos rsi = 0 hyppy bittisiirtoon
    addq %r12, %rax             #lisataan lopputulokseen rax rekisterin r12 arvo
    
bittisiirto:                    #bittisiirron tekevä looppi
    rrmovq %rbx, %r13           #siirretään rekisterin rbx arvo rekisteriin r13
    addq %rbx, %rbx             #kerrotaan rbx kahdella
    addq %r12, %r12             #kerrotaan r12 kahdella
    subq %rbx, %r13             #vähenetään r13 = r13 - rbx
    jl kertolasku               #jos r13 < 0 hypätään kertolaskuun
    ret                         #lopetus 
    
#neliojuuri
.pos 0x500
neliojuuri:
    irmovq $0, %rcx             #res
    irmovq $16777216, %r9          #bit
    irmovq $0,%rdx              #rdx = nollarekisteri
    irmovq $1,%rbx              #rbx = ykkösrekisteri
    irmovq $0,%r13              #nollataan rekisterit
    irmovq $0,%rdi
    irmovq $0,%r14
    irmovq $0,%r11
    irmovq $0,%rsi
    irmovq $0,%rax
    irmovq $0,%r8
    jmp vahennys

vahennys:                       #tarkistetaan onko  num = num - bit < 0
    rrmovq %r12,%r13            #siirretään num rekisteriin r13
    subq %r9,%r13               #vähennetään num = num - bit
    jge erisuuri
siirto:
    call bittisiirtokahdellavakiot
    jmp vahennys

erisuuri:
    irmovq $0, %rdi
    addq %r9, %rdi              #lisataan  bit = rdi
    addq %rcx, %rdi             #lisataan bit + res = rdi
    rrmovq %r12,%r13            #num rekisteriin r13
    subq %rdi,%r13              #tarkistetaan onko res + bit <= num
    jge if                      #jos on hyppy if
    jl else                     #jos ei hyppy else
else:
    call bittisiirtoyhdellavakiot
    call bittisiirtokahdellavakiot
    subq %rdx,%r9               #bit = bit - 0
    je end                      #jos 0, loppuun
    jmp erisuuri
if:
    call vahennyslasku
    call bittisiirtoyhdellavakiot
    addq %r9,%rcx               #res = res + bit
    call bittisiirtokahdellavakiot
    subq %rdx,%r9               #bit = bit - 0
    je end                      #jos 0, loppuun
    jmp erisuuri                #muulloin hyppy erisuuri

end:
    ret
    
.pos 0xa00
vahennyslasku: 
    subq %rcx, %r12             #vähennetään num = num - res
    subq %r9, %r12              #vähennetään num = num - bit
    ret
    
.pos 0xc00
bittisiirtoyhdellavakiot:       #shiftataan rekisterin rcx arvoa yhdella bitilla
    irmovq $0x0002, %r14        #2 rekisteriin r14
    irmovq $0x0001, %r11        #1 rekisteriin r11
    irmovq $0, %rsi
    irmovq 0xfffffffff, %rax         #maksimi arvo yhdella bitilla siirrettaessa
bittisiirtoyhdella:
    irmovq $0, %r8              #0 rekisteriin r8
    rrmovq %r14, %r8            #siirretaan r14 rek. r8
    subq %rax, %r8              #vahennetaan r8 = r8-rax
    jg lopetus                     #jos r8 > rax loppuun
    rrmovq %r14,%r8             #siirrettaan r14 rekisteriin r8
    andq %rcx,%r8               #and-operaatio 
    subq %rdx,%r8               #vahennys r8 = r8 - 0
    je lisays                   #jos r8 = 0 hyppy lisays
siirretaan:
    addq %r11,%rsi              #tallennetaan muistissa oleva bitti rsi:hin
lisays:
    addq %r14,%r14              #kerrotaan r14 kahdella
    addq %r11,%r11              #kerrotaan r11 kahdella
    jmp bittisiirtoyhdella      #hypataan alkuun
lopetus:
    rrmovq %rsi,%rcx
    ret

.pos 0x800
bittisiirtokahdellavakiot:
    irmovq $0x0004, %r14        #2 rekisteriin r14
    irmovq $0x0001, %r11        #1 rekisteriin r11
    irmovq 0xfffffffff, %rax        #maksimi arvo yhdella bitilla siirrettaessa
    irmovq $0,%rsi
bittisiirtokahdella:            #shiftataan rekisterin r9 arvoa kahdella bitilla
    irmovq $0, %r8              #0 rekisteriin r8
    rrmovq %r14, %r8            #siirretaan r14 rek. r8
    subq %rax, %r8              #vahennetaan r8 = r8-rax
    jg loppu                      #jos r8 > rax loppuun
    rrmovq %r14,%r8             #siirrettaan r14 rekisteriin r8
    andq %r9,%r8                #and-operaatio 
    subq %rdx,%r8               #vahennys r8 = r8 - 0
    je lisayskaksi                   #jos r8 = 0 hyppy lisays
siirretaankaksi:
    addq %r11,%rsi              #tallennetaan muistissa oleva bitti rsi:hin
lisayskaksi:
    addq %r14,%r14              #kerrotaan r14 kahdella
    addq %r11,%r11              #kerrotaan r11 kahdella
    jmp bittisiirtokahdella      #hypataan alkuun
loppu:
    rrmovq %rsi,%r9
    ret
 
       
.pos 0x0700
array:
       